name: CI/CD - Microservices Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ L·∫•y code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ C√†i Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Ki·ªÉm tra Docker
      - name: Check Docker version
        run: docker --version

      # 4Ô∏è‚É£ Build t·∫•t c·∫£ Docker image theo docker-compose.yml
      - name: Build Docker images
        run: docker compose -f docker-compose.yml build

      # 5Ô∏è‚É£ T·∫°o file .env cho CI
      - name: Generate .env file for CI
        run: |
          echo "JWT_SECRET=${{ vars.JWT_SECRET }}" >> .env.ci
          echo "MONGODB_PRODUCT_URI=${{ vars.MONGODB_PRODUCT_URI }}" >> .env.ci
          echo "MONGODB_ORDER_URI=${{ vars.MONGODB_ORDER_URI }}" >> .env.ci
          echo "MONGODB_AUTH_URI=${{ vars.MONGODB_AUTH_URI }}" >> .env.ci

      # 6Ô∏è‚É£ Kh·ªüi ƒë·ªông c√°c container
      - name: Start containers
        run: docker compose --env-file .env.ci -f docker-compose.yml up -d

      # 7Ô∏è‚É£ Ki·ªÉm tra container ƒë√£ kh·ªüi ƒë·ªông
      - name: List running containers
        run: docker ps

      # 8Ô∏è‚É£ ƒê·ª£i MongoDB s·∫µn s√†ng
      - name: Wait for MongoDB to be ready
        run: |
          echo "‚è≥ ƒê·ª£i MongoDB kh·ªüi ƒë·ªông..."
          for i in {1..20}; do
            if docker exec mc_mongodb mongosh --eval "db.runCommand({ ping: 1 })" &>/dev/null; then
              echo "‚úÖ MongoDB ƒë√£ s·∫µn s√†ng!"
              break
            fi
            echo "‚öôÔ∏è  MongoDB ch∆∞a s·∫µn s√†ng, ch·ªù th√™m 3s..."
            sleep 3
          done

      # 9Ô∏è‚É£ ƒê·ª£i Product Service s·∫µn s√†ng
      - name: Wait for Product Service to be ready
        run: |
          echo "‚è≥ ƒê·ª£i Product Service ph·∫£n h·ªìi..."
          for i in {1..10}; do
            if curl -s http://localhost:3001/health &>/dev/null; then
              echo "‚úÖ Product Service ƒë√£ s·∫µn s√†ng!"
              break
            fi
            echo "‚öôÔ∏è  Product Service ch∆∞a s·∫µn s√†ng, ch·ªù th√™m 5s..."
            sleep 5
          done

      # üîç 10Ô∏è‚É£ Ki·ªÉm tra log Product Service tr∆∞·ªõc khi test
      - name: Show Product Service logs
        run: docker logs mc_product_service --tail 50

      # 11Ô∏è‚É£ Ch·∫°y file test tr√™n product service
      - name: Run File Test In Product Service
        run: docker exec --env-file .env.ci mc_product_service npm test -- --timeout 40000

      # 12Ô∏è‚É£ D·ª´ng container sau khi test
      - name: Stop containers
        run: docker compose -f docker-compose.yml down


  deploys:
    runs-on: ubuntu-latest
    needs: build-and-run

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Rebuild Docker Images for Deployment
        run: docker compose -f docker-compose.yml build --no-cache

      - name: Tag Built Images to Simple Names
        run: |
          SERVICES=("mc_api_gateway" "mc_auth_service" "mc_order_service" "mc_product_service")
          for SERVICE in ${SERVICES[@]}; do
            COMPOSE_FULL_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${SERVICE}:latest" | head -n 1)
            if [ -n "$COMPOSE_FULL_NAME" ]; then
              echo "Tagging $COMPOSE_FULL_NAME -> ${SERVICE}:latest"
              docker tag "$COMPOSE_FULL_NAME" "${SERVICE}:latest"
            else
              echo "‚ùå Kh√¥ng t√¨m th·∫•y image $SERVICE sau khi build."
              docker images
              exit 1
            fi
          done
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Images
        env:
          DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}
          TAG: ${{ github.sha }}
        run: |
          SERVICES=("mc_api_gateway" "mc_auth_service" "mc_order_service" "mc_product_service")
          for SERVICE in ${SERVICES[@]}; do
            REPO_NAME=$(echo $SERVICE | cut -d'_' -f2-)
            echo "üöÄ Pushing $SERVICE..."
            docker tag $SERVICE:latest $DOCKER_REPO/$REPO_NAME:$TAG
            docker push $DOCKER_REPO/$REPO_NAME:$TAG
            docker tag $SERVICE:latest $DOCKER_REPO/$REPO_NAME:latest
            docker push $DOCKER_REPO/$REPO_NAME:latest
          done
          echo "‚úÖ All images pushed successfully!"
